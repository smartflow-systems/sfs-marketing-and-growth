ROLE: Senior full-stack. Patch the existing SmartFlow Flask app to add booking reminders.
Create models, endpoints, and a background scheduler using APScheduler.
Respect per-tenant notification settings already added (email_enabled, sms_enabled, reminder_hours_before).

========================================
1) requirements.txt — add APScheduler
========================================
Append if missing:
-----
APScheduler>=3.10.4
-----

Install dependencies.

========================================
2) db_models.py — add Booking & ReminderLog
========================================
Open db_models.py and ADD after NotificationSettings:
-----
from sqlalchemy import UniqueConstraint

class Booking(db.Model):
    __tablename__ = "bookings"
    id = db.Column(db.String(64), primary_key=True)
    tenant_id = db.Column(db.String(64), db.ForeignKey("tenants.id"), index=True)
    customer_name = db.Column(db.String(200))
    customer_email = db.Column(db.String(255))
    customer_phone = db.Column(db.String(40))
    start_at = db.Column(db.DateTime, index=True)  # appointment start (UTC)
    status = db.Column(db.String(20), default="confirmed")  # confirmed|cancelled|completed
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class ReminderLog(db.Model):
    __tablename__ = "reminder_logs"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    tenant_id = db.Column(db.String(64), index=True)
    booking_id = db.Column(db.String(64), index=True)
    channel = db.Column(db.String(10))  # email|sms
    kind = db.Column(db.String(20), default="before")  # before|after
    sent_at = db.Column(db.DateTime, default=datetime.utcnow)
    __table_args__ = (UniqueConstraint('booking_id','channel','kind', name='uix_booking_channel_kind'),)
-----
Commit file. (db.create_all() in app.py will create tables.)

========================================
3) app.py — imports & helpers
========================================
Add imports near the top:
-----
from apscheduler.schedulers.background import BackgroundScheduler
from sqlalchemy import and_
from db_models import Booking, ReminderLog, NotificationSettings
from sms import send_sms
from onboarding import send_email_smtp
from config import Config
import uuid
-----

Ensure these helpers exist (add if not):
-----
def get_or_create_notif_settings(tenant_id: str) -> NotificationSettings:
    s = NotificationSettings.query.get(tenant_id)
    if not s:
        s = NotificationSettings(tenant_id=tenant_id)
        db.session.add(s); db.session.commit()
    return s

def notif_ok(tenant_id: str, channel: str) -> bool:
    s = get_or_create_notif_settings(tenant_id)
    if channel == "email":
        return bool(s.email_enabled)
    if channel == "sms":
        has_keys = bool(Config.VONAGE_API_KEY and Config.VONAGE_API_SECRET and Config.VONAGE_NUMBER)
        return bool(s.sms_enabled and has_keys)
    return False
-----

========================================
4) app.py — simple booking APIs (for testing)
========================================
Add routes:

# Create a booking (demo)
@app.post("/api/tenants/<tenant_id>/bookings")
def create_booking(tenant_id):
    # allow admin override or demo user
    data = request.get_json() or {}
    name = data.get("customer_name","Walk-in")
    email = data.get("customer_email")
    phone = data.get("customer_phone")
    start_at_iso = data.get("start_at")  # ISO 8601, e.g. "2025-08-17T15:30:00Z"
    if not start_at_iso: return ("start_at (ISO) required", 400)
    try:
        start_at = datetime.fromisoformat(start_at_iso.replace("Z","+00:00")).replace(tzinfo=None)
    except Exception:
        return ("Invalid start_at format", 400)

    b = Booking(
        id=str(uuid.uuid4())[:12],
        tenant_id=tenant_id,
        customer_name=name,
        customer_email=email,
        customer_phone=phone,
        start_at=start_at,
        status="confirmed"
    )
    db.session.add(b); db.session.commit()
    return {"ok": True, "booking_id": b.id}

# List upcoming bookings for tenant (next 72h)
@app.get("/api/tenants/<tenant_id>/bookings")
def list_bookings(tenant_id):
    now = datetime.utcnow()
    rows = (Booking.query
            .filter(Booking.tenant_id==tenant_id,
                    Booking.start_at >= now,
                    Booking.status=="confirmed")
            .order_by(Booking.start_at.asc())
            .limit(50).all())
    out = []
    for b in rows:
        out.append({
            "id": b.id, "customer_name": b.customer_name,
            "email": b.customer_email, "phone": b.customer_phone,
            "start_at": b.start_at.isoformat()+"Z", "status": b.status
        })
    return out

========================================
5) app.py — reminder worker
========================================
Add the reminder function:

def _send_booking_reminders():
    try:
        now = datetime.utcnow()
        # Scan all tenants that have settings (fallback to demo-tenant if none)
        tenant_ids = [t.id for t in Tenant.query.all()]
        for tid in tenant_ids:
            s = get_or_create_notif_settings(tid)
            hours = int(s.reminder_hours_before or 24)

            # Window: appointments that start between (now + hours) and (now + hours + 5min)
            win_start = now + timedelta(hours=hours)
            win_end   = win_start + timedelta(minutes=5)

            candidates = (Booking.query
                          .filter(Booking.tenant_id==tid,
                                  Booking.status=="confirmed",
                                  Booking.start_at >= win_start,
                                  Booking.start_at <  win_end)
                          .all())
            for b in candidates:
                # Email
                if notif_ok(tid, "email") and b.customer_email:
                    already = ReminderLog.query.filter_by(booking_id=b.id, channel="email", kind="before").first()
                    if not already:
                        body = f"Reminder: {b.customer_name}, you have an appointment at {b.start_at}."
                        try:
                            send_email_smtp(b.customer_email, "Appointment reminder", body)
                            db.session.add(ReminderLog(tenant_id=tid, booking_id=b.id, channel="email", kind="before"))
                            db.session.commit()
                            print(f"[reminder] email sent for {b.id}")
                        except Exception as e:
                            print("[reminder] email error:", e)

                # SMS
                if notif_ok(tid, "sms") and b.customer_phone:
                    already = ReminderLog.query.filter_by(booking_id=b.id, channel="sms", kind="before").first()
                    if not already:
                        msg = f"Reminder: your appointment is at {b.start_at}."
                        ok = send_sms(b.customer_phone, msg)
                        if ok:
                            db.session.add(ReminderLog(tenant_id=tid, booking_id=b.id, channel="sms", kind="before"))
                            db.session.commit()
                            print(f"[reminder] sms sent for {b.id}")
    except Exception as e:
        print("[scheduler] loop error:", e)

Initialize APScheduler (once) after db.create_all():

# --- Scheduler setup ---
scheduler = BackgroundScheduler(daemon=True)
scheduler.add_job(_send_booking_reminders, "interval", minutes=5, id="reminders_every_5m", replace_existing=True)
try:
    scheduler.start()
except Exception as e:
    print("[scheduler] start error:", e)

========================================
6) Quick test recipe
========================================
- Ensure /settings/notifications has email on (and sms if Vonage keys set), timing = 24h.
- Create a test booking scheduled exactly 24h + <=5min from now (UTC).
  Example body for POST /api/tenants/demo-tenant/bookings:
  {
    "customer_name": "Test User",
    "customer_email": "you@example.com",
    "customer_phone": "+447700900123",
    "start_at": "YYYY-MM-DDTHH:MM:00Z"
  }
- When the scheduler hits the window, it will send reminders and log to ReminderLog.
- Check logs and your inbox/phone.

========================================
7) Commit
========================================
Commit message: "Reminders: bookings + APScheduler + per-tenant prefs"
Push to GitHub.

DONE.